# React Context 传值

和 vue 中的 provide inject 思想类似, 都是用来通过父组件跨级别给子组件传值的方式.

- 子元素无法直接修改 context 的值
- 父元素可以传递函数，子元素通过函数调用通知父元素更改 context 的状态

示例

创建 textContext.js

```javascript
import React from "react"
const TestContext = React.createContext()
export default TestContext

```

创建父组件 App.js

```javascript
import React from "react"
import TestContext from "./TestContext.js"
import Child from "./Child"
class App extends React.Component{
    constructor(props){
        super(props)
        this.state = {
            name:"测试"
        }
    }
    handleSetName = (value)=>{
        this.setState((state)=>{
            return{
                ...state,
                name:value
            }
        })
    }
    render(){
        return(
        	<TestContext.Provider value={{
            	state:this.state,
            	setNameFun:this.handleSetName
            }}>
            
            </TestContext.Provider>
        )
    }
}
```

创建子组件 Child.js

```javascript
import React from "react"
import TestContext from "./TestContext.js"
class Child extends React.Component{
    static contextType = ThemeContext;
    constructor(props){
        super(props)
    }
    handleClick = ()=>{
        this.context.setNameFun("通知父元素更改状态")
    }
    render(){
        return(
       		<div onClick={handleClick}>this is Child {this.context.state.name}</div>
        )
    }
}
```

